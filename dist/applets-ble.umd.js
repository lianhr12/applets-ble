!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("eventemitter2")):"function"==typeof define&&define.amd?define(["exports","eventemitter2"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["applets-ble"]={},e.eventemitter2)}(this,function(e,t){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=i(t);function r(e){let t="";return t=e&&e.errCode?{10001:"当前蓝牙适配器不可用",10002:"没有找到指定设备",10003:"连接失败",10004:"没有找到指定服务",10005:"没有找到指定特征值",10006:"当前连接已断开",10007:"当前特征值不支持此操作",10008:"其余所有系统上报的异常",10009:"Android 系统特有，系统版本低于 4.3 不支持 BLE",10012:"连接超时",10013:"连接 deviceId 为空或者是格式不正确"}[e.errCode]||"蓝牙功能暂不支持":"string"==typeof e?"device not found"===e?"找不到该设备":e:"蓝牙功能暂不支持"}function a(e){console.log(e)}function c(e,n){return new Promise((t,i)=>{e({...n||{},success:e=>t(e),fail:e=>i(e)})})}function l(e,t,i){var n=65535;do{if(i<=t)break;if(e.length<=i)break;for(var r=t;r<=i;r++)for(var a=65535&e[r],c=0;c<8;c++)n=1&(a^n)?n>>1^40961:n>>1,a>>=1}while(0);return 65535&(n<<8|n>>8)}var s={print:a,promisify:c,promisifyCallback:function(e){return new Promise((t,i)=>{e(e=>{t(e)},e=>{i(e)})})},modBusCRC16:l,onBLEConnectionStateChange:function(){return a("监听蓝牙适配器状态..."),function(){return new Promise((t,e)=>{wx.onBLEConnectionStateChange(e=>{e.connected||(this.closeBleAdapter(),wx.setStorageSync("bluestatus",""),this.emitter.emit("channel",{type:"connect",data:"蓝牙已断开"})),t(e)})})}.call(this).then(e=>(a("√ 监听蓝牙适配器状态成功，结果为"+JSON.stringify(e)),[null,e])).catch(e=>{e=r(e);return a("× 监听蓝牙适配器状态失败! "+e),[e,null]})},openAdapter:function(){return a("准备初始化蓝牙适配器..."),c(wx.openBluetoothAdapter).then(e=>(a("√ 适配器初始化成功"),[null,e])).catch(e=>(a("× 适配器初始化失败"),console.log(e),[r(e),null]))},closeAdapter:function(){return a("释放蓝牙适配器..."),c(wx.closeBluetoothAdapter).then(e=>(a("√ 释放适配器成功！"),[null,e])).catch(e=>{e=r(e);return a("× 释放适配器失败："+e),[e,null]})},startSearchBle:function(){return a("准备搜索附近的蓝牙外围设备..."),c(wx.startBluetoothDevicesDiscovery,{allowDuplicatesKey:!0,interval:1e3}).then(e=>(a("√ 搜索蓝牙设备成功!"),[null,e])).catch(e=>{var t=r(e);return a("× 搜索蓝牙设备失败！"+e),[t,null]})},stopSearchBle:function(){return a("停止查找新设备..."),c(wx.stopBluetoothDevicesDiscovery).then(e=>(a("√ 已停止查找设备！"),[null,e])).catch(e=>{e=r(e);return a("× 停止查找设备失败! "+e),[e,null]})},onBluetoothFound:function(){return a("监听搜索蓝牙新设备事件..."),function(){let t=0;return new Promise((n,e)=>{wx.onBluetoothDeviceFound(i=>{var e=i.devices;1<++t&&e.forEach(e=>{var t=e.name||e.localName||"";console.log(t,11212),-1<this.bleName.indexOf(t)&&(a(`已嗅探到符合条件的设备：${e.name}: `+e.deviceId),this.deviceId=e.deviceId,n(i))}),a("已嗅探蓝牙设备数："+e.length)})})}.call(this).then(e=>(a("√ 设备ID找到成功！"),[null,e])).catch(e=>{e=r(e);return a("× 设备ID找到失败! "+e),[e,null]})},connectBle:function(){return a("准备连接新设备..., deviceId: "+this.deviceId),c(wx.createBLEConnection,{deviceId:this.deviceId}).then(e=>(a("√ 连接蓝牙成功！"),[null,e])).catch(e=>{var t=r(e);return a("× 连接蓝牙失败！"+JSON.stringify(e)),[t,null]})},closeBleConnection:function(){return a("断开蓝牙连接..."),c(wx.closeBLEConnection,{deviceId:this.deviceId}).then(e=>(a("√ 断开蓝牙连接成功！"),[null,e])).catch(e=>{e=r(e);return a("× 断开蓝牙连接失败！"+e),[e,null]})},getBleServices:function(){return a("获取蓝牙设备所有服务..."),c(wx.getBLEDeviceServices,{deviceId:this.deviceId}).then(e=>{return a("√ 获取service成功"),a("serviceIdCondition: "+this.serviceIdCondition),e.services.forEach((e,t)=>{-1<e.uuid.indexOf(this.serviceIdCondition)&&(this.serviceId=e.uuid)}),[null,e]}).catch(e=>{e=r(e);return a("× 获取service失败! "+e),[e,null]})},getCharacteristics:function(){return a(`开始获取蓝牙特征值...
 serviceId: `+this.serviceId),c(wx.getBLEDeviceCharacteristics,{deviceId:this.deviceId,serviceId:this.serviceId}).then(e=>{a("√ 获取特征值成功！"),a(e);var i=e.characteristics;for(let e=0,t=i.length;e<t;e++){var n=i[e],r=n.properties;r.read&&(this.readCharacteristicId=n.uuid,a("readCharacteristicId: "+n.uuid)),r.write&&!r.read&&(this.writeCharacteristicId=n.uuid,a("writeCharacteristicId:"+n.uuid)),(r.notify||r.indicate)&&(this.notifyCharacteristicId=n.uuid,a("notifyCharacteristicId:"+n.uuid))}return[null,e]}).catch(e=>{e=r(e);return a("× 获取蓝牙特征值失败! "+e),[e,null]})},notifyBleCharacteristicValueChange:function(){return a(`开始订阅蓝牙特征值...
characteristicId: ${this.notifyCharacteristicId}
 deviceId:${this.deviceId}
serviceId:`+this.serviceId),c(wx.notifyBLECharacteristicValueChange,{characteristicId:this.notifyCharacteristicId,deviceId:this.deviceId,serviceId:this.serviceId,state:!0}).then(e=>(a("√ 订阅notify成功!"),[null,e])).catch(e=>{e=r(e);return a("× 订阅notify失败！"),[e,null]})},onBleCharacteristicValueChange:function(){return a("监听接收蓝牙特征值..."),function(){let n=(new Date).getTime();return new Promise((i,e)=>{wx.onBLECharacteristicValueChange(e=>{var e=new Uint8Array(e.value),t=(new Date).getTime();a("接收硬件的数据反馈：命令码为："+e[3]),800<t-n&&(a("-- 节流800ms,Lock!"),n=t,this.emitter.emit("channel",{type:"response",data:e})),i(e)})})}.call(this).then(e=>(a("√ 监听接收蓝牙特征值成功，结果为"+JSON.stringify(e)),[null,e])).catch(e=>{e=r(e);return a("× 监听接收蓝牙特征值失败! "+e),[e,null]})},cleanSentOrder:function(e,t){a("开始封装指令...");let i=new Array(e.length+8);return i[0]=238,i[1]=250,i[2]=e.length+1,i[3]=t,e.map((e,t)=>{i[t+4]=e}),t=l(i,2,e.length+3),i[i.length-4]=t>>8&255,i[i.length-3]=255&t,i[i.length-2]=252,i[i.length-1]=255,a("✔ 封装成功!"+i),i},writeBLECharacteristicValue:function(e){return c(wx.writeBLECharacteristicValue,{deviceId:this.deviceId,serviceId:this.serviceId,characteristicId:this.writeCharacteristicId,value:e}).then(e=>(a("✔ 写入数据成功！"),[null,e])).catch(e=>(a("✘ 写入数据失败！"+JSON.stringify(e)),[r(e),null]))}};Object.defineProperty(e,"EventEmitter2",{enumerable:!0,get:function(){return n.default}}),e.BLE=class extends class{constructor(e,t){this.bleName=e,this.emitter=t,this.readCharacteristicId="",this.writeCharacteristicId="",this.notifyCharacteristicId="",this.deviceId="",this.serviceIdCondition="0000FFF",this.serviceId="",this.module=this.getModule()}getModule(){return s}async onBleConnectionStateChange(){var[e]=await this.module.onBLEConnectionStateChange.call(this);return null==e||(this.emitter.emit("channel",{type:"connect",data:"监听蓝牙适配器状态异常"}),!1)}async openBleAdapter(){var[e]=await this.module.openAdapter.call(this);return null==e||(this.emitter.emit("channel",{type:"connect",data:"openBluetoothAdapterFailAlreadyOpened"}),await this.closeBleAdapter(),!1)}async closeBleAdapter(){var[e]=await this.module.closeAdapter.call(this);return null==e}async startSearchBle(){var[e]=await this.module.startSearchBle.call(this);return null==e&&(this.emitter.emit("channel",{type:"connect",data:"正在连接中"}),!0)}async stopSearchBle(){var[e]=await this.module.stopSearchBle.call(this);return null==e}async onBluetoothFound(){var[e]=await this.module.onBluetoothFound.call(this);return null==e||(this.emitter.emit("channel",{type:"connect",data:"未找到设备"}),!1)}async connectBle(){var[e]=await this.module.connectBle.call(this);return null==e||(this.emitter.emit("channel",{type:"connect",data:"未找到设备！"}),!1)}async closeBleConnection(){var[e]=await this.module.closeBleConnection.call(this);return null==e}async getBleServices(){var[e]=await this.module.getBleServices.call(this);return null==e}async getCharacteristics(){var[e]=await this.module.getCharacteristics.call(this);if(null==e)return this.emitter.emit("channel",{type:"connect",data:"蓝牙已连接"}),!0;this.emitter.emit("channel",{type:"connect",data:"无法订阅特征值"}),this.closeBleConnection(),this.closeBleAdapter()}async notifyBleCharacteristicValueChange(){var[e]=await this.module.notifyBleCharacteristicValueChange.call(this);return null==e}async onBleCharacteristicValueChange(){var[e]=await this.module.onBleCharacteristicValueChange.call(this);return null==e||(this.emitter.emit("channel",{type:"connect",data:"监听蓝牙设备推送异常"}),!1)}async sentOrder(e,t){var e=this.module.cleanSentOrder(e,t),t=(console.log("-- 发送数据:",e),new Uint8Array(e).buffer),[e]=await this.module.writeBLECharacteristicValue.call(this,t);return null==e&&(console.log("数据发送成功！"),!0)}}{constructor(e,t){super(e,t)}listen(e){this.emitter.removeAllListeners("channel"),this.emitter.on("channel",e)}removeListen(){this.emitter.removeAllListeners("channel")}async init(){var e;this.onBleConnectionStateChange(),await this.openBleAdapter(),await this.startSearchBle(),e=await this.onBluetoothFound(),await this.stopSearchBle(),e&&(await this.connectBle(),await this.getBleServices(),await this.getCharacteristics(),await this.notifyBleCharacteristicValueChange(),this.onBleCharacteristicValueChange())}async send(e,t){return await this.sentOrder(e,t)}async close(){await this.closeBleConnection(),await this.closeBleAdapter()}},Object.defineProperty(e,"__esModule",{value:!0})});
